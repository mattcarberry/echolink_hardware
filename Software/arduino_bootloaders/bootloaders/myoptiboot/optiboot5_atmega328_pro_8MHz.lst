
optiboot5_atmega328_pro_8MHz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007fce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00007e00  00007e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000242  2**0
                  CONTENTS, READONLY
  3 .stab         00000ac8  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008f8  00000000  00000000  00000d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000021  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	1f 92       	push	r1
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
    7e06:	11 24       	eor	r1, r1
    7e08:	84 b7       	in	r24, 0x34	; 52
    7e0a:	14 be       	out	0x34, r1	; 52
    7e0c:	81 ff       	sbrs	r24, 1
    7e0e:	d9 d0       	rcall	.+434    	; 0x7fc2 <appStart>
    7e10:	85 e0       	ldi	r24, 0x05	; 5
    7e12:	80 93 81 00 	sts	0x0081, r24
    7e16:	82 e0       	ldi	r24, 0x02	; 2
    7e18:	80 93 c0 00 	sts	0x00C0, r24
    7e1c:	88 e1       	ldi	r24, 0x18	; 24
    7e1e:	80 93 c1 00 	sts	0x00C1, r24
    7e22:	86 e0       	ldi	r24, 0x06	; 6
    7e24:	80 93 c2 00 	sts	0x00C2, r24
    7e28:	89 e1       	ldi	r24, 0x19	; 25
    7e2a:	80 93 c4 00 	sts	0x00C4, r24
    7e2e:	8e e0       	ldi	r24, 0x0E	; 14
    7e30:	b3 d0       	rcall	.+358    	; 0x7f98 <watchdogConfig>
    7e32:	25 9a       	sbi	0x04, 5	; 4
    7e34:	26 e0       	ldi	r18, 0x06	; 6
    7e36:	88 e1       	ldi	r24, 0x18	; 24
    7e38:	9e ef       	ldi	r25, 0xFE	; 254
    7e3a:	31 e0       	ldi	r19, 0x01	; 1
    7e3c:	90 93 85 00 	sts	0x0085, r25
    7e40:	80 93 84 00 	sts	0x0084, r24
    7e44:	36 bb       	out	0x16, r19	; 22
    7e46:	b0 9b       	sbis	0x16, 0	; 22
    7e48:	fe cf       	rjmp	.-4      	; 0x7e46 <main+0x46>
    7e4a:	1d 9a       	sbi	0x03, 5	; 3
    7e4c:	a8 95       	wdr
    7e4e:	21 50       	subi	r18, 0x01	; 1
    7e50:	a9 f7       	brne	.-22     	; 0x7e3c <main+0x3c>
    7e52:	81 2c       	mov	r8, r1
    7e54:	91 2c       	mov	r9, r1
    7e56:	ee 24       	eor	r14, r14
    7e58:	e3 94       	inc	r14
    7e5a:	95 e0       	ldi	r25, 0x05	; 5
    7e5c:	d9 2e       	mov	r13, r25
    7e5e:	21 e1       	ldi	r18, 0x11	; 17
    7e60:	c2 2e       	mov	r12, r18
    7e62:	33 e0       	ldi	r19, 0x03	; 3
    7e64:	f3 2e       	mov	r15, r19
    7e66:	8c d0       	rcall	.+280    	; 0x7f80 <getch>
    7e68:	81 34       	cpi	r24, 0x41	; 65
    7e6a:	71 f4       	brne	.+28     	; 0x7e88 <main+0x88>
    7e6c:	89 d0       	rcall	.+274    	; 0x7f80 <getch>
    7e6e:	89 83       	std	Y+1, r24	; 0x01
    7e70:	99 d0       	rcall	.+306    	; 0x7fa4 <verifySpace>
    7e72:	89 81       	ldd	r24, Y+1	; 0x01
    7e74:	82 38       	cpi	r24, 0x82	; 130
    7e76:	09 f4       	brne	.+2      	; 0x7e7a <main+0x7a>
    7e78:	1e c0       	rjmp	.+60     	; 0x7eb6 <main+0xb6>
    7e7a:	81 38       	cpi	r24, 0x81	; 129
    7e7c:	11 f4       	brne	.+4      	; 0x7e82 <main+0x82>
    7e7e:	85 e0       	ldi	r24, 0x05	; 5
    7e80:	01 c0       	rjmp	.+2      	; 0x7e84 <main+0x84>
    7e82:	83 e0       	ldi	r24, 0x03	; 3
    7e84:	76 d0       	rcall	.+236    	; 0x7f72 <putch>
    7e86:	72 c0       	rjmp	.+228    	; 0x7f6c <main+0x16c>
    7e88:	82 34       	cpi	r24, 0x42	; 66
    7e8a:	11 f4       	brne	.+4      	; 0x7e90 <main+0x90>
    7e8c:	84 e1       	ldi	r24, 0x14	; 20
    7e8e:	03 c0       	rjmp	.+6      	; 0x7e96 <main+0x96>
    7e90:	85 34       	cpi	r24, 0x45	; 69
    7e92:	19 f4       	brne	.+6      	; 0x7e9a <main+0x9a>
    7e94:	85 e0       	ldi	r24, 0x05	; 5
    7e96:	8e d0       	rcall	.+284    	; 0x7fb4 <getNch>
    7e98:	69 c0       	rjmp	.+210    	; 0x7f6c <main+0x16c>
    7e9a:	85 35       	cpi	r24, 0x55	; 85
    7e9c:	41 f4       	brne	.+16     	; 0x7eae <main+0xae>
    7e9e:	70 d0       	rcall	.+224    	; 0x7f80 <getch>
    7ea0:	88 2e       	mov	r8, r24
    7ea2:	6e d0       	rcall	.+220    	; 0x7f80 <getch>
    7ea4:	91 2c       	mov	r9, r1
    7ea6:	98 2a       	or	r9, r24
    7ea8:	88 0c       	add	r8, r8
    7eaa:	99 1c       	adc	r9, r9
    7eac:	5e c0       	rjmp	.+188    	; 0x7f6a <main+0x16a>
    7eae:	86 35       	cpi	r24, 0x56	; 86
    7eb0:	21 f4       	brne	.+8      	; 0x7eba <main+0xba>
    7eb2:	84 e0       	ldi	r24, 0x04	; 4
    7eb4:	7f d0       	rcall	.+254    	; 0x7fb4 <getNch>
    7eb6:	80 e0       	ldi	r24, 0x00	; 0
    7eb8:	e5 cf       	rjmp	.-54     	; 0x7e84 <main+0x84>
    7eba:	84 36       	cpi	r24, 0x64	; 100
    7ebc:	09 f0       	breq	.+2      	; 0x7ec0 <main+0xc0>
    7ebe:	3a c0       	rjmp	.+116    	; 0x7f34 <main+0x134>
    7ec0:	5f d0       	rcall	.+190    	; 0x7f80 <getch>
    7ec2:	5e d0       	rcall	.+188    	; 0x7f80 <getch>
    7ec4:	b8 2e       	mov	r11, r24
    7ec6:	5c d0       	rcall	.+184    	; 0x7f80 <getch>
    7ec8:	81 14       	cp	r8, r1
    7eca:	80 e7       	ldi	r24, 0x70	; 112
    7ecc:	98 06       	cpc	r9, r24
    7ece:	18 f4       	brcc	.+6      	; 0x7ed6 <main+0xd6>
    7ed0:	f4 01       	movw	r30, r8
    7ed2:	f7 be       	out	0x37, r15	; 55
    7ed4:	e8 95       	spm
    7ed6:	00 e0       	ldi	r16, 0x00	; 0
    7ed8:	11 e0       	ldi	r17, 0x01	; 1
    7eda:	52 d0       	rcall	.+164    	; 0x7f80 <getch>
    7edc:	f8 01       	movw	r30, r16
    7ede:	81 93       	st	Z+, r24
    7ee0:	8f 01       	movw	r16, r30
    7ee2:	be 12       	cpse	r11, r30
    7ee4:	fa cf       	rjmp	.-12     	; 0x7eda <main+0xda>
    7ee6:	81 14       	cp	r8, r1
    7ee8:	f0 e7       	ldi	r31, 0x70	; 112
    7eea:	9f 06       	cpc	r9, r31
    7eec:	18 f0       	brcs	.+6      	; 0x7ef4 <main+0xf4>
    7eee:	f4 01       	movw	r30, r8
    7ef0:	f7 be       	out	0x37, r15	; 55
    7ef2:	e8 95       	spm
    7ef4:	57 d0       	rcall	.+174    	; 0x7fa4 <verifySpace>
    7ef6:	07 b6       	in	r0, 0x37	; 55
    7ef8:	00 fc       	sbrc	r0, 0
    7efa:	fd cf       	rjmp	.-6      	; 0x7ef6 <main+0xf6>
    7efc:	f4 01       	movw	r30, r8
    7efe:	a0 e0       	ldi	r26, 0x00	; 0
    7f00:	b1 e0       	ldi	r27, 0x01	; 1
    7f02:	8c 91       	ld	r24, X
    7f04:	11 96       	adiw	r26, 0x01	; 1
    7f06:	2c 91       	ld	r18, X
    7f08:	11 97       	sbiw	r26, 0x01	; 1
    7f0a:	90 e0       	ldi	r25, 0x00	; 0
    7f0c:	92 2b       	or	r25, r18
    7f0e:	12 96       	adiw	r26, 0x02	; 2
    7f10:	0c 01       	movw	r0, r24
    7f12:	e7 be       	out	0x37, r14	; 55
    7f14:	e8 95       	spm
    7f16:	11 24       	eor	r1, r1
    7f18:	32 96       	adiw	r30, 0x02	; 2
    7f1a:	a0 38       	cpi	r26, 0x80	; 128
    7f1c:	81 e0       	ldi	r24, 0x01	; 1
    7f1e:	b8 07       	cpc	r27, r24
    7f20:	81 f7       	brne	.-32     	; 0x7f02 <main+0x102>
    7f22:	f4 01       	movw	r30, r8
    7f24:	d7 be       	out	0x37, r13	; 55
    7f26:	e8 95       	spm
    7f28:	07 b6       	in	r0, 0x37	; 55
    7f2a:	00 fc       	sbrc	r0, 0
    7f2c:	fd cf       	rjmp	.-6      	; 0x7f28 <main+0x128>
    7f2e:	c7 be       	out	0x37, r12	; 55
    7f30:	e8 95       	spm
    7f32:	1c c0       	rjmp	.+56     	; 0x7f6c <main+0x16c>
    7f34:	84 37       	cpi	r24, 0x74	; 116
    7f36:	61 f4       	brne	.+24     	; 0x7f50 <main+0x150>
    7f38:	23 d0       	rcall	.+70     	; 0x7f80 <getch>
    7f3a:	22 d0       	rcall	.+68     	; 0x7f80 <getch>
    7f3c:	18 2f       	mov	r17, r24
    7f3e:	20 d0       	rcall	.+64     	; 0x7f80 <getch>
    7f40:	31 d0       	rcall	.+98     	; 0x7fa4 <verifySpace>
    7f42:	f4 01       	movw	r30, r8
    7f44:	85 91       	lpm	r24, Z+
    7f46:	4f 01       	movw	r8, r30
    7f48:	14 d0       	rcall	.+40     	; 0x7f72 <putch>
    7f4a:	11 50       	subi	r17, 0x01	; 1
    7f4c:	d1 f7       	brne	.-12     	; 0x7f42 <main+0x142>
    7f4e:	0e c0       	rjmp	.+28     	; 0x7f6c <main+0x16c>
    7f50:	85 37       	cpi	r24, 0x75	; 117
    7f52:	39 f4       	brne	.+14     	; 0x7f62 <main+0x162>
    7f54:	27 d0       	rcall	.+78     	; 0x7fa4 <verifySpace>
    7f56:	8e e1       	ldi	r24, 0x1E	; 30
    7f58:	0c d0       	rcall	.+24     	; 0x7f72 <putch>
    7f5a:	85 e9       	ldi	r24, 0x95	; 149
    7f5c:	0a d0       	rcall	.+20     	; 0x7f72 <putch>
    7f5e:	8f e0       	ldi	r24, 0x0F	; 15
    7f60:	91 cf       	rjmp	.-222    	; 0x7e84 <main+0x84>
    7f62:	81 35       	cpi	r24, 0x51	; 81
    7f64:	11 f4       	brne	.+4      	; 0x7f6a <main+0x16a>
    7f66:	88 e0       	ldi	r24, 0x08	; 8
    7f68:	17 d0       	rcall	.+46     	; 0x7f98 <watchdogConfig>
    7f6a:	1c d0       	rcall	.+56     	; 0x7fa4 <verifySpace>
    7f6c:	80 e1       	ldi	r24, 0x10	; 16
    7f6e:	01 d0       	rcall	.+2      	; 0x7f72 <putch>
    7f70:	7a cf       	rjmp	.-268    	; 0x7e66 <main+0x66>

00007f72 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f72:	90 91 c0 00 	lds	r25, 0x00C0
    7f76:	95 ff       	sbrs	r25, 5
    7f78:	fc cf       	rjmp	.-8      	; 0x7f72 <putch>
  UART_UDR = ch;
    7f7a:	80 93 c6 00 	sts	0x00C6, r24
    7f7e:	08 95       	ret

00007f80 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f80:	80 91 c0 00 	lds	r24, 0x00C0
    7f84:	87 ff       	sbrs	r24, 7
    7f86:	fc cf       	rjmp	.-8      	; 0x7f80 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f88:	80 91 c0 00 	lds	r24, 0x00C0
    7f8c:	84 fd       	sbrc	r24, 4
    7f8e:	01 c0       	rjmp	.+2      	; 0x7f92 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f90:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }
  
  ch = UART_UDR;
    7f92:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7f96:	08 95       	ret

00007f98 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f98:	e0 e6       	ldi	r30, 0x60	; 96
    7f9a:	f0 e0       	ldi	r31, 0x00	; 0
    7f9c:	98 e1       	ldi	r25, 0x18	; 24
    7f9e:	90 83       	st	Z, r25
  WDTCSR = x;
    7fa0:	80 83       	st	Z, r24
    7fa2:	08 95       	ret

00007fa4 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fa4:	ed df       	rcall	.-38     	; 0x7f80 <getch>
    7fa6:	80 32       	cpi	r24, 0x20	; 32
    7fa8:	19 f0       	breq	.+6      	; 0x7fb0 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7faa:	88 e0       	ldi	r24, 0x08	; 8
    7fac:	f5 df       	rcall	.-22     	; 0x7f98 <watchdogConfig>
    7fae:	ff cf       	rjmp	.-2      	; 0x7fae <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fb0:	84 e1       	ldi	r24, 0x14	; 20
    7fb2:	df cf       	rjmp	.-66     	; 0x7f72 <putch>

00007fb4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fb4:	cf 93       	push	r28
    7fb6:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fb8:	e3 df       	rcall	.-58     	; 0x7f80 <getch>
    7fba:	c1 50       	subi	r28, 0x01	; 1
    7fbc:	e9 f7       	brne	.-6      	; 0x7fb8 <getNch+0x4>
  verifySpace();
}
    7fbe:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7fc0:	f1 cf       	rjmp	.-30     	; 0x7fa4 <verifySpace>

00007fc2 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fc2:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fc4:	80 e0       	ldi	r24, 0x00	; 0
    7fc6:	e8 df       	rcall	.-48     	; 0x7f98 <watchdogConfig>
  __asm__ __volatile__ (
    7fc8:	ee 27       	eor	r30, r30
    7fca:	ff 27       	eor	r31, r31
    7fcc:	09 94       	ijmp
